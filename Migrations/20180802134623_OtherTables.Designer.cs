// <auto-generated />
using Cards.DatabaseLink;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace CardAppMySql.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180802134623_OtherTables")]
    partial class OtherTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026");

            modelBuilder.Entity("Cards.DatabaseLink.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("IPAddress");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Cards.DatabaseLink.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Cards.DatabaseLink.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<int>("BranchId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasColumnName("EmailAddress")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("StaffId");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Cards.DatabaseLink.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Cards.DatabaseLink.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Cards.DatabaseLink.ApplicationUserRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Cards.DatabaseLink.ApplicationUserToken", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken");
                });

            modelBuilder.Entity("Cards.Models.AccountDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountExternalNumber");

                    b.Property<string>("AccountName");

                    b.Property<string>("AccountNumber");

                    b.Property<string>("AccountSchemeCode");

                    b.Property<string>("AccountStatus");

                    b.Property<int>("AccountTypeId");

                    b.Property<int>("AccountTypeInTWCMS");

                    b.Property<string>("AvailableBalance");

                    b.Property<string>("LedgerBalance");

                    b.HasKey("Id");

                    b.ToTable("AccountDetails");
                });

            modelBuilder.Entity("Cards.Models.AccountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Code");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("AccountTypes");
                });

            modelBuilder.Entity("Cards.Models.CardIssuance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountDocumentation");

                    b.Property<int?>("AuthorizeBy");

                    b.Property<DateTime?>("AuthorizeDate");

                    b.Property<string>("BranchBatch");

                    b.Property<int>("BranchId");

                    b.Property<string>("CardHolderResInfo");

                    b.Property<string>("CardPrefix");

                    b.Property<string>("CardStat");

                    b.Property<int>("CardStatusId");

                    b.Property<int>("CardVersion");

                    b.Property<string>("Card_PRG");

                    b.Property<string>("Comment");

                    b.Property<string>("CurrencyNo");

                    b.Property<int>("CustomerId");

                    b.Property<string>("Customerstart");

                    b.Property<DateTime?>("DateActivated");

                    b.Property<DateTime?>("DateRecievedAtBranchBy");

                    b.Property<DateTime?>("DateRecievedFromProcessor");

                    b.Property<DateTime?>("DateReleased");

                    b.Property<DateTime?>("DateSentToBranch");

                    b.Property<string>("DeclineComment");

                    b.Property<string>("DefAccountType");

                    b.Property<string>("Discre_DATA");

                    b.Property<DateTime>("EntryDate");

                    b.Property<DateTime?>("ExpiryDate");

                    b.Property<string>("HldResCode");

                    b.Property<string>("INSecurePINOffset");

                    b.Property<int>("InitiatedBy");

                    b.Property<string>("InitiatorAction");

                    b.Property<bool>("IsCardActive");

                    b.Property<bool>("IsCardRequest");

                    b.Property<bool>("IsPinRequest");

                    b.Property<string>("IssueRef");

                    b.Property<string>("MainBatch");

                    b.Property<string>("NameOnCard");

                    b.Property<string>("PAN");

                    b.Property<int>("PINStatusId");

                    b.Property<int>("PINVersion");

                    b.Property<int>("PickUpBranchId");

                    b.Property<int?>("ProcessedBy");

                    b.Property<DateTime?>("ProcessedDate");

                    b.Property<int>("ProductId")
                        .HasColumnName("CardProductID");

                    b.Property<int?>("RecievedAtBranchBy");

                    b.Property<int?>("RecievedFromProcessorBy");

                    b.Property<int?>("ReleasedBy");

                    b.Property<string>("SecurePINLength");

                    b.Property<string>("SecurePINOffset");

                    b.Property<int?>("SentToBranchBy");

                    b.Property<string>("Seq_NO");

                    b.Property<string>("SequenceNumber");

                    b.Property<string>("Track2Offset");

                    b.Property<string>("Track2Val");

                    b.Property<string>("UniqueGUID");

                    b.Property<string>("ValData");

                    b.Property<string>("ValDataQue");

                    b.Property<bool>("WaiveCharge");

                    b.Property<string>("cardAction");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CardStatusId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PINStatusId");

                    b.ToTable("CardIssuances");
                });

            modelBuilder.Entity("Cards.Models.CardMode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("CardModes");
                });

            modelBuilder.Entity("Cards.Models.CardProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CardIssuanceId");

                    b.Property<int>("CardTypeId");

                    b.Property<double>("Charge");

                    b.Property<string>("ChargesAccount");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("CurrencyCode");

                    b.Property<int>("FileTypeId");

                    b.Property<bool>("IsSecAccRequired");

                    b.Property<string>("ProductBin");

                    b.Property<string>("ProductCode");

                    b.Property<string>("ProductName");

                    b.Property<string>("VatAccount")
                        .HasMaxLength(15);

                    b.Property<double>("VatAmount");

                    b.HasKey("Id");

                    b.HasIndex("CardIssuanceId");

                    b.HasIndex("CardTypeId");

                    b.HasIndex("FileTypeId");

                    b.ToTable("CardProducts");
                });

            modelBuilder.Entity("Cards.Models.CardStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("CardStatuses");
                });

            modelBuilder.Entity("Cards.Models.CardType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("CardTypes");
                });

            modelBuilder.Entity("Cards.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccType2");

                    b.Property<string>("AccountNumber");

                    b.Property<string>("AccountType");

                    b.Property<string>("AccountTypeName");

                    b.Property<string>("Address");

                    b.Property<DateTime>("BirthDay");

                    b.Property<string>("BirthFIO");

                    b.Property<string>("BirthPlace");

                    b.Property<string>("CompanyCode");

                    b.Property<string>("CorAddress");

                    b.Property<DateTime?>("CostomerRegistrationDate");

                    b.Property<string>("Currrency");

                    b.Property<string>("CurrrencyCode");

                    b.Property<string>("CustIdFinacle");

                    b.Property<string>("Departmentcode");

                    b.Property<string>("Education");

                    b.Property<string>("Email");

                    b.Property<string>("EmployeNumber");

                    b.Property<DateTime?>("EmploymentDate");

                    b.Property<string>("FAX");

                    b.Property<string>("FIO");

                    b.Property<string>("Family");

                    b.Property<string>("FirstName");

                    b.Property<string>("Gender");

                    b.Property<string>("INN");

                    b.Property<string>("JOB");

                    b.Property<string>("JobPhoneNumber");

                    b.Property<string>("LATFIO");

                    b.Property<string>("LastName");

                    b.Property<string>("MiddleName");

                    b.Property<string>("PASPlace");

                    b.Property<string>("PassportCode");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("ResAddresss");

                    b.Property<string>("Resident");

                    b.Property<string>("ResidentCountrycode");

                    b.Property<string>("Salary");

                    b.Property<string>("Sex");

                    b.Property<string>("Tittle");

                    b.Property<string>("city");

                    b.Property<string>("region");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Cards.Models.ErrorLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ErrorDate");

                    b.Property<string>("InnerException");

                    b.Property<string>("Message");

                    b.Property<string>("Source");

                    b.Property<string>("StackTrace");

                    b.Property<string>("User");

                    b.HasKey("Id");

                    b.ToTable("errorLogs");
                });

            modelBuilder.Entity("Cards.Models.FileType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("FileType");
                });

            modelBuilder.Entity("Cards.Models.PanDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CardIssuanceId");

                    b.Property<DateTime>("EntryDate");

                    b.Property<string>("MaskedPan");

                    b.Property<string>("Pan");

                    b.HasKey("Id");

                    b.ToTable("PanDetails");
                });

            modelBuilder.Entity("Cards.Models.PanUpload", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("filename");

                    b.Property<DateTime>("upload_date");

                    b.Property<int>("uploaded_by");

                    b.HasKey("Id");

                    b.ToTable("PanUploads");
                });

            modelBuilder.Entity("Cards.Models.PanUploadDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("acctno1");

                    b.Property<string>("acctno2");

                    b.Property<string>("card_type");

                    b.Property<string>("guid");

                    b.Property<string>("itc_id");

                    b.Property<string>("nameoncard");

                    b.Property<string>("pan");

                    b.HasKey("Id");

                    b.ToTable("PanUploadDetails");
                });

            modelBuilder.Entity("Cards.Models.Pin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BranchPINReceivedBy");

                    b.Property<DateTime>("BranchPINReceivedDate");

                    b.Property<int>("CardIssuanceId");

                    b.Property<int>("PINAuthorizedBy");

                    b.Property<DateTime>("PINAuthorizedDate");

                    b.Property<int>("PINDispatchedBy");

                    b.Property<DateTime>("PINDispatchedDate");

                    b.Property<DateTime>("PINEntryDate");

                    b.Property<int>("PINInitationBranch");

                    b.Property<int>("PINInitiatedBy");

                    b.Property<int>("PINIssuedBy");

                    b.Property<DateTime>("PINIssuedDate");

                    b.Property<string>("PINLetterAttorney");

                    b.Property<int>("PINPickedUpBy");

                    b.Property<int>("PINPickupBranch");

                    b.Property<int>("PINReceivedBy");

                    b.Property<DateTime>("PINReceivedDate");

                    b.Property<int>("PINStatusId");

                    b.Property<string>("SignStatus");

                    b.HasKey("Id");

                    b.HasIndex("CardIssuanceId");

                    b.HasIndex("PINInitiatedBy");

                    b.ToTable("Pin");
                });

            modelBuilder.Entity("Cards.Models.PinStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("PinStatus");
                });

            modelBuilder.Entity("Cards.Models.TranCharges", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BranchID");

                    b.Property<double>("CMF_Amt");

                    b.Property<int>("CardProductId");

                    b.Property<string>("CurrencyCode");

                    b.Property<double>("DebitAmount");

                    b.Property<string>("DestinationAccountCMF");

                    b.Property<DateTime?>("LogDate");

                    b.Property<int>("NumberOfRetries");

                    b.Property<DateTime?>("PstdDate");

                    b.Property<bool>("PstdFlg");

                    b.Property<string>("RspCode");

                    b.Property<string>("SourceAccount");

                    b.Property<int?>("traceNumber");

                    b.HasKey("Id");

                    b.ToTable("TranCharges");
                });

            modelBuilder.Entity("Cards.Models.ViewModels.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BranchName");

                    b.Property<string>("Sol");

                    b.HasKey("Id");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("Cards.DatabaseLink.ApplicationRoleClaim", b =>
                {
                    b.HasOne("Cards.DatabaseLink.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cards.DatabaseLink.ApplicationUserClaim", b =>
                {
                    b.HasOne("Cards.DatabaseLink.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cards.DatabaseLink.ApplicationUserLogin", b =>
                {
                    b.HasOne("Cards.DatabaseLink.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cards.DatabaseLink.ApplicationUserRole", b =>
                {
                    b.HasOne("Cards.DatabaseLink.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cards.DatabaseLink.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cards.DatabaseLink.ApplicationUserToken", b =>
                {
                    b.HasOne("Cards.DatabaseLink.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cards.Models.CardIssuance", b =>
                {
                    b.HasOne("Cards.Models.ViewModels.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cards.Models.CardStatus", "CardStatus")
                        .WithMany()
                        .HasForeignKey("CardStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cards.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cards.Models.PinStatus", "PinStatus")
                        .WithMany()
                        .HasForeignKey("PINStatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cards.Models.CardProduct", b =>
                {
                    b.HasOne("Cards.Models.CardIssuance")
                        .WithMany("Product")
                        .HasForeignKey("CardIssuanceId");

                    b.HasOne("Cards.Models.CardType", "CardType")
                        .WithMany()
                        .HasForeignKey("CardTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cards.Models.FileType", "FileType")
                        .WithMany()
                        .HasForeignKey("FileTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cards.Models.Pin", b =>
                {
                    b.HasOne("Cards.Models.CardIssuance", "CardIssuance")
                        .WithMany()
                        .HasForeignKey("CardIssuanceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cards.DatabaseLink.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("PINInitiatedBy")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
